<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CTF Writeups on toasterpwn</title><link>https://toasterpwn.github.io/categories/ctf-writeups/</link><description>Recent content in CTF Writeups on toasterpwn</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>toasterpwn</copyright><atom:link href="https://toasterpwn.github.io/categories/ctf-writeups/index.xml" rel="self" type="application/rss+xml"/><item><title>TetCTF 2023: casino</title><link>https://toasterpwn.github.io/posts/tetctf-2023-casino/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://toasterpwn.github.io/posts/tetctf-2023-casino/</guid><description>Overview casino was an easy &amp;lsquo;crypto&amp;rsquo; challenge from TetCTF 2023, written by ndh. The description is as follows:
Not really crypto&amp;hellip;
The idea of the challenge is to beat a casino and get enough money that your balance as bytes is longer (or equal to) the length of the flag. The challenge is written in go, the source is pasted below.
go main.go package main import ( &amp;#34;bufio&amp;#34; &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;math/big&amp;#34; &amp;#34;os&amp;#34; ) type Request struct { Recipient string `json:&amp;#34;recipient&amp;#34;` Command string `json:&amp;#34;command&amp;#34;` // | recipient | command | username | amount | n | balance | proof_data | // |------------|----------------------|----------|--------|---|---------|------------| // | FlagSeller | PrintFlag | x | | | x | x | // | Casino | Register | x | | | | | // | Casino | Bet | x | x | x | | | // | Casino | ShowBalanceWithProof | x | | | | | Username string `json:&amp;#34;username&amp;#34;` Amount *big.</description><content>&lt;h1 id="overview">Overview&lt;/h1>
&lt;p>&lt;code>casino&lt;/code> was an easy &amp;lsquo;crypto&amp;rsquo; challenge from TetCTF 2023, written by &lt;code>ndh&lt;/code>.
The description is as follows:&lt;/p>
&lt;blockquote>
&lt;p>Not really crypto&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>The idea of the challenge is to beat a casino and get enough money that your balance as bytes is longer (or equal to) the length of the flag. The challenge is written in &lt;code>go&lt;/code>, the source is pasted below.&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="1" type="checkbox" checked />
&lt;label for="1">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">main.go&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
package main
import (
&amp;#34;bufio&amp;#34;
&amp;#34;encoding/json&amp;#34;
&amp;#34;fmt&amp;#34;
&amp;#34;log&amp;#34;
&amp;#34;math/big&amp;#34;
&amp;#34;os&amp;#34;
)
type Request struct {
Recipient string `json:&amp;#34;recipient&amp;#34;`
Command string `json:&amp;#34;command&amp;#34;`
// | recipient | command | username | amount | n | balance | proof_data |
// |------------|----------------------|----------|--------|---|---------|------------|
// | FlagSeller | PrintFlag | x | | | x | x |
// | Casino | Register | x | | | | |
// | Casino | Bet | x | x | x | | |
// | Casino | ShowBalanceWithProof | x | | | | |
Username string `json:&amp;#34;username&amp;#34;`
Amount *big.Int `json:&amp;#34;amount&amp;#34;`
N int `json:&amp;#34;n&amp;#34;`
Balance *big.Int `json:&amp;#34;balance&amp;#34;`
ProofData []byte `json:&amp;#34;proof_data&amp;#34;`
}
func main() {
flag, err := os.ReadFile(&amp;#34;flag&amp;#34;)
if err != nil {
log.Fatal(err)
}
casino := NewCasino()
flagSeller := NewFlagSeller(casino.RetrieveRootHash, string(flag))
var request Request
reader := bufio.NewReader(os.Stdin)
for {
line, err := reader.ReadBytes(&amp;#39;\n&amp;#39;)
if err != nil {
return
}
if err := json.Unmarshal(line, &amp;amp;request); err != nil {
fmt.Printf(&amp;#34;Cannot read request: %s\n&amp;#34;, err)
continue
}
switch request.Recipient {
case &amp;#34;Casino&amp;#34;:
switch request.Command {
case &amp;#34;Register&amp;#34;:
if err := casino.Register(request.Username); err != nil {
fmt.Printf(&amp;#34;An error occured: %s\n&amp;#34;, err)
continue
}
case &amp;#34;Bet&amp;#34;:
if err := casino.Bet(request.Username, request.Amount, request.N); err != nil {
fmt.Printf(&amp;#34;An error occured: %s\n&amp;#34;, err)
continue
}
case &amp;#34;ShowBalanceWithProof&amp;#34;:
if err := casino.ShowBalanceWithProof(request.Username); err != nil {
fmt.Printf(&amp;#34;An error occured: %s\n&amp;#34;, err)
continue
}
default:
fmt.Printf(&amp;#34;Unknown command: %s\n&amp;#34;, request.Command)
continue
}
case &amp;#34;FlagSeller&amp;#34;:
switch request.Command {
case &amp;#34;PrintFlag&amp;#34;:
if err := flagSeller.PrintFlag(request.Username, request.Balance, request.ProofData); err != nil {
fmt.Printf(&amp;#34;An error occured: %s\n&amp;#34;, err)
continue
}
default:
fmt.Printf(&amp;#34;Unknown command: %s\n&amp;#34;, request.Command)
continue
}
default:
fmt.Printf(&amp;#34;Unknown recipient: %s\n&amp;#34;, request.Recipient)
continue
}
}
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="collapsable-code">
&lt;input id="2" type="checkbox" checked />
&lt;label for="2">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">casino.go&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
package main
import (
cryptorand &amp;#34;crypto/rand&amp;#34;
&amp;#34;encoding/base64&amp;#34;
&amp;#34;encoding/binary&amp;#34;
&amp;#34;errors&amp;#34;
&amp;#34;fmt&amp;#34;
&amp;#34;github.com/cosmos/iavl&amp;#34;
db &amp;#34;github.com/tendermint/tm-db&amp;#34;
&amp;#34;log&amp;#34;
&amp;#34;math/big&amp;#34;
&amp;#34;math/rand&amp;#34;
)
type Casino struct {
tree *iavl.MutableTree
numAccounts int
}
func NewCasino() *Casino {
tree, err := iavl.NewMutableTree(db.NewMemDB(), 128, true)
if err != nil {
log.Fatal(err)
}
tmp := make([]byte, 8)
if _, err = cryptorand.Read(tmp); err != nil {
log.Fatal(err)
}
rand.Seed(int64(binary.LittleEndian.Uint64(tmp)))
return &amp;amp;Casino{
tree: tree,
numAccounts: 0,
}
}
func (c *Casino) getBalance(username string) (*big.Int, error) {
value, err := c.tree.Get([]byte(username))
if err != nil {
log.Fatal(err)
}
if value == nil {
return nil, errors.New(&amp;#34;player-not-exist&amp;#34;)
}
return new(big.Int).SetBytes(value), nil
}
func (c *Casino) setBalance(username string, value *big.Int) {
_, err := c.tree.Set([]byte(username), value.Bytes())
if err != nil {
log.Fatal(err)
}
_, _, err = c.tree.SaveVersion()
if err != nil {
log.Fatal(err)
}
}
const MaxPlayers = 100
const InitialBalance = 2023
func (c *Casino) Register(username string) error {
exist, err := c.tree.Has([]byte(username))
if err != nil {
log.Fatal(err)
}
if exist {
return errors.New(&amp;#34;player-exists&amp;#34;)
}
if c.numAccounts &amp;gt;= MaxPlayers {
return errors.New(&amp;#34;max-players&amp;#34;)
}
c.numAccounts &amp;#43;= 1
c.setBalance(username, big.NewInt(InitialBalance))
fmt.Printf(&amp;#34;Added user: %s.\n&amp;#34;, username)
return nil
}
func (c *Casino) Bet(username string, amount *big.Int, n int) error {
currentBalance, err := c.getBalance(username)
if err != nil {
return err
}
if currentBalance.Cmp(amount) &amp;lt; 0 {
return errors.New(&amp;#34;insufficient-balance&amp;#34;)
}
r := rand.Intn(2023)
if r == n { // correct guess
reward := new(big.Int).Mul(amount, big.NewInt(2022))
currentBalance.Add(currentBalance, reward)
c.setBalance(username, currentBalance)
fmt.Printf(&amp;#34;YOU WIN! Current balance: %d (&amp;#43;%d).\n&amp;#34;, currentBalance, reward)
} else {
currentBalance.Sub(currentBalance, amount)
c.setBalance(username, currentBalance)
fmt.Printf(&amp;#34;YOU LOSE (%d != %d)! Current balance: %d (-%d).\n&amp;#34;, r, n, currentBalance, amount)
}
return nil
}
func (c *Casino) ShowBalanceWithProof(username string) error {
value, proof, err := c.tree.GetWithProof([]byte(username))
if err != nil {
log.Fatal(err)
}
if value == nil {
return errors.New(&amp;#34;player-not-exist&amp;#34;)
}
proofData, err := proof.ToProto().Marshal()
if err != nil {
log.Fatal(err)
}
fmt.Printf(&amp;#34;%d, %s\n&amp;#34;, new(big.Int).SetBytes(value), base64.StdEncoding.EncodeToString(proofData))
return nil
}
func (c *Casino) RetrieveRootHash() []byte {
result, err := c.tree.Hash()
if err != nil {
log.Fatal(err)
}
return result
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="collapsable-code">
&lt;input id="3" type="checkbox" checked />
&lt;label for="3">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">flag_seller.go&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
package main
import (
&amp;#34;fmt&amp;#34;
&amp;#34;github.com/cosmos/iavl&amp;#34;
iavlproto &amp;#34;github.com/cosmos/iavl/proto&amp;#34;
&amp;#34;github.com/golang/protobuf/proto&amp;#34;
&amp;#34;math/big&amp;#34;
)
type FlagSeller struct {
dbRootRetriever func() []byte
flag string
}
func NewFlagSeller(dbRootRetriever func() []byte, flag string) *FlagSeller {
return &amp;amp;FlagSeller{
dbRootRetriever: dbRootRetriever,
flag: flag,
}
}
func (fs *FlagSeller) PrintFlag(usename string, balance *big.Int, proofData []byte) error {
var pbProof iavlproto.RangeProof
if err := proto.Unmarshal(proofData, &amp;amp;pbProof); err != nil {
return fmt.Errorf(&amp;#34;bad proof format: %w&amp;#34;, err)
}
proof, err := iavl.RangeProofFromProto(&amp;amp;pbProof)
if err != nil {
return fmt.Errorf(&amp;#34;bad proof format: %w&amp;#34;, err)
}
if err := proof.Verify(fs.dbRootRetriever()); err != nil {
return fmt.Errorf(&amp;#34;proof verification failed: %w&amp;#34;, err)
}
if err := proof.VerifyItem([]byte(usename), balance.Bytes()); err != nil {
return fmt.Errorf(&amp;#34;proof verification failed: %w&amp;#34;, err)
}
l := balance.BitLen() / 8
dot3 := &amp;#34;...&amp;#34;
if l &amp;gt;= len(fs.flag) {
l = len(fs.flag)
dot3 = &amp;#34;&amp;#34;
}
fmt.Printf(&amp;#34;Your flag is: %s%s\n&amp;#34;, fs.flag[:l], dot3)
return nil
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>I admit, I actually couldn&amp;rsquo;t spot the bug here until &lt;code>casino2&lt;/code> was released. When the sequel dropped, I diffed the two challenges to find one small difference:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-diff" data-lang="diff">&lt;span style="display:flex;">&lt;span>diff casino/casino/casino.go casino2/casino.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>83a84
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; amount.Abs(amount)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the second challenge, the absolute value function is used on the amount we bet, meaning the amount always will be positive, however, this is omitted in the first challenge. There is a check to make sure our balance is greater than the amount we bet, to stop us from betting too much&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">currentBalance&lt;/span>.&lt;span style="color:#a6e22e">Cmp&lt;/span>(&lt;span style="color:#a6e22e">amount&lt;/span>) &amp;lt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;insufficient-balance&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;but this check does not prevent us from providing a negative bet amount, which is of course less than our current balance! If we specify a negative amount and then lose, the program will subtract a negative number from our balance, which will actually add to the balance. We can specify a hugely negative number, verify our balance, and then request the flag to solve the challenge. My solution in python is below.&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="4" type="checkbox" />
&lt;label for="4">
&lt;span class="collapsable-code__language">python&lt;/span>
&lt;span class="collapsable-code__title">x.py&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-python" >&lt;code>
from pwn import *
from json import loads, dumps
r = remote(&amp;#34;192.53.115.129&amp;#34;,31338)
r.sendline(dumps({&amp;#34;recipient&amp;#34;:&amp;#34;Casino&amp;#34;,&amp;#34;command&amp;#34;:&amp;#34;Register&amp;#34;,&amp;#34;username&amp;#34;:&amp;#34;toast&amp;#34;}).encode(&amp;#39;utf-8&amp;#39;))
r.sendline(dumps({&amp;#34;recipient&amp;#34;:&amp;#34;Casino&amp;#34;,&amp;#34;command&amp;#34;:&amp;#34;Bet&amp;#34;,&amp;#34;username&amp;#34;:&amp;#34;toast&amp;#34;,&amp;#34;amount&amp;#34;:-999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,&amp;#34;n&amp;#34;:1}).encode(&amp;#39;utf-8&amp;#39;))
r.sendline(dumps({&amp;#34;recipient&amp;#34;:&amp;#34;Casino&amp;#34;,&amp;#34;command&amp;#34;:&amp;#34;ShowBalanceWithProof&amp;#34;,&amp;#34;username&amp;#34;:&amp;#34;toast&amp;#34;}).encode(&amp;#39;utf-8&amp;#39;))
r.recvline()
r.recvline()
data = r.recvline().decode()
balance = int(data.split(&amp;#34;,&amp;#34;)[0])
proof = data.split(&amp;#34;,&amp;#34;)[1].strip()
log.success(f&amp;#34;Balance: {balance}&amp;#34;)
r.sendline(dumps({&amp;#34;recipient&amp;#34;:&amp;#34;FlagSeller&amp;#34;,&amp;#34;command&amp;#34;:&amp;#34;PrintFlag&amp;#34;,&amp;#34;username&amp;#34;:&amp;#34;toast&amp;#34;,&amp;#34;balance&amp;#34;:balance,&amp;#34;proof_data&amp;#34;:proof}).encode(&amp;#39;utf-8&amp;#39;))
r.interactive()
&lt;/code>&lt;/pre>
&lt;/div></content></item></channel></rss>